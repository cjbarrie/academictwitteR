% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_user_mentions.R
\name{get_user_mentions}
\alias{get_user_mentions}
\title{Get tweets mentioning a single user}
\usage{
get_user_mentions(
  x,
  start_tweets,
  end_tweets,
  bearer_token = get_bearer(),
  n = 100,
  file = NULL,
  data_path = NULL,
  export_query = TRUE,
  bind_tweets = TRUE,
  page_n = 100,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{x}{string containing one user id or a vector of user ids}

\item{start_tweets}{string, starting date}

\item{end_tweets}{string, ending date}

\item{bearer_token}{string, bearer token}

\item{n}{integer, upper limit of tweets to be fetched}

\item{file}{string, name of the resulting RDS file}

\item{data_path}{string, if supplied, fetched data can be saved to the designated path as jsons}

\item{export_query}{If \code{TRUE}, queries are exported to data_path}

\item{bind_tweets}{If \code{TRUE}, tweets captured are bound into a data.frame for assignment}

\item{page_n}{integer, amount of tweets to be returned by per page}

\item{verbose}{If \code{FALSE}, query progress messages are suppressed}

\item{...}{arguments will be passed to \code{build_query()} function. See \code{?build_query()} for further information.}
}
\value{
a data.frame
}
\description{
This function collects tweets mentioning an user ID from the users endpoint.
}
\details{
Only the most recent 800 Tweets can be retrieved.

This does not return retweets of the users' tweets.

If a filename is supplied, the function will
save the result as a RDS file.

If a data path is supplied, the function will also return
tweet-level data in a data/ path as a series of JSONs beginning "data_";
while user-level data will be returned as a series of JSONs beginning "users_".

When bind_tweets is \code{TRUE}, the function returns a data frame.
}
\examples{
\dontrun{

get_user_mentions("881861582715850752",
                  start_tweets = "2022-01-01T00:00:00Z", 
                  end_tweets = "2022-05-14T00:00:00Z",
                  bearer_token = get_bearer(),
                  n = 200)
}
}
